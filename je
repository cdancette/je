#!/usr/bin/env python

import argparse
import json
import sys
import readline
readline.parse_and_bind('tab: complete')

def print_type(curr):
    if type(curr) == list:
        print(f"List[{len(curr)}]")
    elif type(curr) == dict:
        print(f"Dict[{len(curr)}]")
        if len(curr) < 10:
            print("Keys: ", curr.keys())
    else:
        print(f"other")
        if len(repr(curr)) > 20:
            print(curr)

parser = argparse.ArgumentParser()
parser.add_argument("file")
args = parser.parse_args()

with open(args.file) as f:
    data = json.load(f)
stack = [data]
print_type(data)
names = []

while True:
    names_repr = '.'.join(names)
    curr = stack[-1]
    command = input(f"{names_repr} > ")
    # try to parse it as an int
    try:
        int_command = int(command)
    except ValueError:
        int_command = None
    if command == "keys" or command == "k":
        print(curr.keys())
    elif command == "print" or command == "p":
        print(curr)
    elif command == "up" or command == "u":
        stack.pop()
        names.pop()
        print_type(stack[-1])
    elif command == "quit" or command == "q":
        sys.exit(0)
    elif command.startswith("."):
        name = command[1:]
        if name in curr:
            stack.append(curr.get(name, None))
            names.append(name)
            print_type(stack[-1])
        else:
            print(f"Unknown key {name}")
    elif int_command is not None:
        stack.append(curr[int_command])
        names.append(command)
        print_type(stack[-1])
    else:
        print(f"Unkonwn command {command}")
